import math
import time
from fischertechnik.controller.Motor import Motor
from lib.camera import *
from lib.controller import *
from lib.display import *

red = None
green = None
SP = None
blue = None
red2 = None
green2 = None
tolerance_3 = None
blue2 = None
tolerance_2 = None
tolerance_1 = None
error = None
error_pas = None
suma_error = None
Kp = None
Ki = None
Kd = None
Correcion = None
Velocidad = None
m_impulso = None
distancia = None
counter = None
Distancia_Frontal = None
counter1 = None


def color_callback(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback2(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback3(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback4(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback5(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback6(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback7(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback8(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback9(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback10(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback11(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback12(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback13(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback14(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback15(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback16(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback17(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback18(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


def color_callback19(event):
    global red, green, SP, blue, red2, green2, tolerance_3, blue2, tolerance_2, tolerance_1, error, error_pas, suma_error, Kp, Ki, Kd, Correcion, Velocidad, m_impulso, distancia, counter, Distancia_Frontal, counter1
    if event.value.get_rgb_red() < red + tolerance_3 and event.value.get_rgb_green() < green + tolerance_2 and event.value.get_rgb_blue() > blue - tolerance_1:
        SP = -30
    if event.value.get_rgb_red() < red2 + tolerance_1 and event.value.get_rgb_green() < green2 + tolerance_3 and event.value.get_rgb_blue() > blue2 - tolerance_2:
        SP = 30


color_detector337.add_detection_listener(color_callback)
color_detector336.add_detection_listener(color_callback2)
color_detector332.add_detection_listener(color_callback3)
color_detector334.add_detection_listener(color_callback4)
color_detector5.add_detection_listener(color_callback5)
color_detector33.add_detection_listener(color_callback6)
color_detector7.add_detection_listener(color_callback7)
color_detector42.add_detection_listener(color_callback8)
color_detector4.add_detection_listener(color_callback9)
color_detector2.add_detection_listener(color_callback10)
color_detector333.add_detection_listener(color_callback11)
color_detector43.add_detection_listener(color_callback12)
color_detector.add_detection_listener(color_callback13)
color_detector6.add_detection_listener(color_callback14)
color_detector335.add_detection_listener(color_callback15)
color_detector434.add_detection_listener(color_callback16)
color_detector44.add_detection_listener(color_callback17)
color_detector3.add_detection_listener(color_callback18)
color_detector337.add_detection_listener(color_callback19)


red = 238
green = 39
blue = 55
red2 = 16
green2 = 79
blue2 = 97
tolerance_3 = 10
tolerance_2 = 50
tolerance_1 = 100
SP = -40
error = 0
error_pas = 0
suma_error = 0
Kp = 2.3
Ki = 0
Kd = 30
Correcion = 0
Velocidad = 512
m_impulso = 0.00172746
distancia = round(18.7 / m_impulso)
counter = 0
Distancia_Frontal = TXT_M_I3_ultrasonic_distance_meter.get_distance()
while not counter > distancia:
    error = SP - (TXT_M_I1_ultrasonic_distance_meter.get_distance() - TXT_M_I2_ultrasonic_distance_meter.get_distance())
    suma_error = (suma_error if isinstance(suma_error, (int, float)) else 0) + error
    Correcion = min(max(Kp * error + (Kd * (error - error_pas) + Ki * suma_error), -80), 80)
    if TXT_M_I3_ultrasonic_distance_meter.get_distance() < 40:
        Velocidad = min(max(21 * (TXT_M_I3_ultrasonic_distance_meter.get_distance() - 5), 150), 512)
    else:
        Velocidad = 512
    if TXT_M_I2_ultrasonic_distance_meter.get_distance() < 30:
        Correcion = (Correcion if isinstance(Correcion, (int, float)) else 0) + -80
    if TXT_M_I1_ultrasonic_distance_meter.get_distance() < 30:
        Correcion = (Correcion if isinstance(Correcion, (int, float)) else 0) + 80
    TXT_M_M1_encodermotor.set_speed(int(Velocidad), Motor.CW)
    TXT_M_M1_encodermotor.start()
    TXT_M_S1_servomotor.set_position(int(256 + Correcion))
    error_pas = error
    counter = (counter if isinstance(counter, (int, float)) else 0) + 1
    display.set_attr("txt_label.text", str(counter))
    if TXT_M_I4_color_sensor.get_voltage() < red + tolerance_3 and TXT_M_I4_color_sensor.get_voltage() < green + tolerance_2 and TXT_M_I4_color_sensor.get_voltage() > blue - tolerance_1:
        SP = -30
    if TXT_M_I4_color_sensor.get_voltage() < red2 + tolerance_1 and TXT_M_I4_color_sensor.get_voltage() < green2 + tolerance_3 and TXT_M_I4_color_sensor.get_voltage() > blue2 - tolerance_2:
        SP = 30
time.sleep(3)
TXT_M_S1_servomotor.set_position(int(256))
while not (TXT_M_I3_ultrasonic_distance_meter.get_distance() < 40):
    TXT_M_M1_encodermotor.set_speed(int(200), Motor.CW)
    TXT_M_M1_encodermotor.start()
TXT_M_M1_encodermotor.stop()
counter1 = TXT_M_C1_motor_step_counter.get_count()
TXT_M_S1_servomotor.set_position(int(380))
TXT_M_M1_encodermotor.set_speed(int(140), Motor.CCW)
TXT_M_M1_encodermotor.start()
while True:
    if (math.fabs(TXT_M_C1_motor_step_counter.get_count()) > 140 + counter1):
        break
    time.sleep(0.010)
TXT_M_M1_encodermotor.stop()
TXT_M_S1_servomotor.set_position(int(114))
counter1 = TXT_M_C1_motor_step_counter.get_count()
TXT_M_M1_encodermotor.set_speed(int(200), Motor.CCW)
TXT_M_M1_encodermotor.start()
while True:
    if (math.fabs(TXT_M_C1_motor_step_counter.get_count()) > 20 + counter1):
        break
    time.sleep(0.010)
TXT_M_M1_encodermotor.stop()
counter1 = TXT_M_C1_motor_step_counter.get_count()
TXT_M_S1_servomotor.set_position(int(270))
TXT_M_M1_encodermotor.set_speed(int(200), Motor.CCW)
TXT_M_M1_encodermotor.start()
while True:
    if (math.fabs(TXT_M_C1_motor_step_counter.get_count()) > 10 + counter1):
        break
    time.sleep(0.010)
TXT_M_M1_encodermotor.stop()


